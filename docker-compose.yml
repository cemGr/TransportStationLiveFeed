
services:
  db:
    image: postgis/postgis:15-3.3        # PostGIS image based on PostgreSQL 15 and PostGIS 3.3
    container_name: pg_postgis
    restart: unless-stopped
    environment:
      POSTGRES_USER: radverkehr           # DB user
      POSTGRES_PASSWORD: passwort123  
      POSTGRES_DB: radstationen           # database name
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./initdb:/docker-entrypoint-initdb.d   # run all *.sql on first startup
      - ./data:/data
    ports:
      - "5432:5432"                       # expose port 5432 on the host

  #  pgAdmin for management via Web GUI (http://localhost:8080)
  pgadmin:
    image: dpage/pgadmin4:7.5
    container_name: pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: grafcem98@gmail.com
      PGADMIN_DEFAULT_PASSWORD: passwort123
    ports:
      - "8080:80"
    volumes:
      - pgadmindata:/var/lib/pgadmin

  scraper:
    build: .
    container_name: scraper
    command: >
      python -m src.scraper.scraper --kind geojson --dir ./scraper_data/live --interval 60
    volumes:
      - ./scraper_data:/app/scraper_data
    environment:
      PGHOST: db
      PGPORT: 5432
      PGUSER: radverkehr
      PGPASSWORD: passwort123
      PGDATABASE: radstationen
    depends_on:
      - db

  trip_scraper:
    build:
      context: .
      dockerfile: Dockerfile.crawler
    container_name: trip_scraper
    command: >
      python -m src.scraper.scraper --kind trip --dir ./scraper_data/trip_data
    volumes:
      - ./scraper_data:/app/scraper_data
    environment:
      PGHOST: db
      PGPORT: 5432
      PGUSER: radverkehr
      PGPASSWORD: passwort123
      PGDATABASE: radstationen
    depends_on:
      - db

  weather_service:
    build: .
    container_name: weather_service
    command: >
      sh -c "while true; do python -m src.weather_service; sleep 600; done"
    environment:
      PGHOST: db
      PGPORT: 5432
      PGUSER: radverkehr
      PGPASSWORD: passwort123
      PGDATABASE: radstationen
    depends_on:
      - db

  ui:
      build:
        context: .            # reuse repo root
        dockerfile: Dockerfile   # see below
      container_name: streamlit_ui
      command: >
        streamlit run presentation/main.py
        --server.port=8501
        --server.address=0.0.0.0
        --server.headless=true
      volumes:
        - .:/app              # hot-reload while developing
      environment:
        # database connection (same as the workers)
        PGHOST: db
        PGPORT: 5432
        PGUSER: radverkehr
        PGPASSWORD: passwort123
        PGDATABASE: radstationen

        # OpenRouteService – put this in a .env file so it’s not in git
        ORS_API_KEY: ${ORS_API_KEY}

      ports:
        - "8501:8501"         # browse http://localhost:8501
      depends_on:
        - db
volumes:
  pgdata:
  pgadmindata:
